from matplotlib.ticker import FuncFormatter
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import seaborn as sns

for idx in range(len(vega_weights_all)):
    fig, axes = plt.subplots(1, 4, figsize=(20, 5))

    # ── 1) Vega% Distribution ──────────────────────
    bars = sns.barplot(
        x=vega_weights_all[idx].index,
        y=vega_weights_all[idx].iloc[:,0],
        ax=axes[0]
    ).patches

    # remove x‐ticks
    axes[0].set_xticks([])

    # compute max bar height
    max_h = max(bar.get_height() for bar in bars)

    # define two “lanes” inside the plot
    lane_low  = max_h * 0.10   # 10% up
    lane_high = max_h * 0.40   # 40% up

    # annotate each non‐zero bar in one of the lanes
    for bar, opt in zip(bars, vega_weights_all[idx].index):
        h = bar.get_height()
        if h <= 0:
            continue

        x = bar.get_x() + bar.get_width() / 2

        # choose lane based on bar height (so labels don't stack)
        y_text = lane_low  if h < max_h * 0.5 else lane_high
        color  = "black"  if h < max_h * 0.5 else "white"

        axes[0].text(
            x, y_text, opt,
            ha="center", va="center",
            rotation=90,
            color=color,
            fontsize=9,
            clip_on=True                # keep it inside the axes
        )

    axes[0].set_title('Vega% Distribution')

    # ── 2) PNL$ ─────────────────────────────────────
    sns.lineplot(data=pnl_ts_all[idx].iloc[:,0], ax=axes[1])
    axes[1].set_ylim(-50_000, 100_000)
    axes[1].yaxis.set_major_formatter(
        FuncFormatter(lambda y, pos: f"{int(y/1000)}k")
    )

    # ── 3) Cumulative PNL$ ──────────────────────────
    sns.lineplot(data=pnl_ts_all[idx].iloc[:,0].cumsum(), ax=axes[2])

    # ── 4) Gamma$ ──────────────────────────────────
    sns.lineplot(data=gamma_ts_all[idx].iloc[:,0], ax=axes[3])

    # ── common styling for axes 1,2,3 ──────────────
    for i in [1, 2, 3]:
        axes[i].set_xlabel('')
        axes[i].set_ylabel('')
        axes[i].yaxis.set_major_formatter(
            FuncFormatter(lambda y, pos: f"{int(y/1000)}k")
        )
        axes[i].xaxis.set_major_formatter(mdates.DateFormatter('%m/%y'))
        axes[i].tick_params(axis='x', rotation=90)

    # titles & layout
    axes[1].set_title('PNL$')
    axes[2].set_title('Cumulative PNL$')
    axes[3].set_title('Gamma$')

    plt.tight_layout()
    plt.show()
    break
